const { createCanvas } = require('canvas');
const fs = require('fs').promises;
const fsSync = require('fs');
const path = require('path');
const Country = require('../models/country');
const logger = require('../utils/logger');

class ImageService {
  constructor() {
    this.cacheDir = path.join(__dirname, '../cache');
    this.imagePath = path.join(this.cacheDir, 'summary.png');
    
    // Ensure cache directory exists synchronously
    if (!fsSync.existsSync(this.cacheDir)) {
      fsSync.mkdirSync(this.cacheDir, { recursive: true });
    }
  }

  async generateSummaryImage() {
    try {
      logger.info('🖼️ Generating summary image...');
      
      // Get data for the image
      const totalCountries = await Country.count();
      const topCountries = await Country.findAll({
        order: [['estimated_gdp', 'DESC']],
        limit: 5,
      });
      const lastRefreshed = await Country.max('last_refreshed_at');

      // Create canvas (800x600 pixels)
      const canvas = createCanvas(800, 600);
      const ctx = canvas.getContext('2d');

      // Background gradient
      const gradient = ctx.createLinearGradient(0, 0, 800, 600);
      gradient.addColorStop(0, '#667eea');
      gradient.addColorStop(1, '#764ba2');
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, 800, 600);

      // Title
      ctx.fillStyle = '#ffffff';
      ctx.font = 'bold 32px Arial';
      ctx.textAlign = 'center';
      ctx.fillText('GlobalExchangeAPI Summary', 400, 60);

      // Total countries
      ctx.font = '24px Arial';
      ctx.fillText(`Total Countries: ${totalCountries}`, 400, 110);

      // Last refreshed
      ctx.font = '18px Arial';
      ctx.fillStyle = '#e0e0e0';
      const refreshedText = lastRefreshed 
        ? `Last Refreshed: ${new Date(lastRefreshed).toLocaleString()}`
        : 'Last Refreshed: Never';
      ctx.fillText(refreshedText, 400, 140);

      // Top countries header
      ctx.fillStyle = '#ffffff';
      ctx.font = 'bold 20px Arial';
      ctx.textAlign = 'left';
      ctx.fillText('Top 5 Countries by Estimated GDP:', 50, 190);

      // Top countries list
      ctx.font = '16px Arial';
      let yPosition = 230;
      
      topCountries.forEach((country, index) => {
        const rank = index + 1;
        const gdpFormatted = country.estimated_gdp 
          ? `$${this.formatNumber(country.estimated_gdp)}`
          : 'N/A';
        
        // Rank and country name
        ctx.fillStyle = '#ffffff';
        ctx.fillText(`${rank}. ${country.name}`, 70, yPosition);
        
        // GDP value (right-aligned)
        ctx.fillStyle = '#4ade80'; // Green color for GDP
        ctx.textAlign = 'right';
        ctx.fillText(gdpFormatted, 730, yPosition);
        
        // Reset alignment
        ctx.textAlign = 'left';
        yPosition += 30;
      });

      // Footer
      ctx.fillStyle = '#cbd5e1';
      ctx.font = '12px Arial';
      ctx.textAlign = 'center';
      ctx.fillText('Generated by GlobalExchangeAPI • https://github.com/yourusername/global-exchange-api', 400, 580);

      // Save image
      const buffer = canvas.toBuffer('image/png');
      await fs.writeFile(this.imagePath, buffer);

      logger.info('✅ Summary image generated successfully');
      return this.imagePath;
    } catch (error) {
      logger.error('❌ Failed to generate summary image:', error);
      throw error;
    }
  }

  formatNumber(num) {
    if (!num) return '0';
    
    if (num >= 1e12) {
      return (num / 1e12).toFixed(2) + 'T';
    } else if (num >= 1e9) {
      return (num / 1e9).toFixed(2) + 'B';
    } else if (num >= 1e6) {
      return (num / 1e6).toFixed(2) + 'M';
    } else if (num >= 1e3) {
      return (num / 1e3).toFixed(2) + 'K';
    }
    return num.toLocaleString(undefined, { maximumFractionDigits: 2 });
  }

  async getImagePath() {
    try {
      await fs.access(this.imagePath);
      return this.imagePath;
    } catch (error) {
      return null;
    }
  }
}

module.exports = new ImageService();